/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BmButton {
    }
    interface BmDropdown {
        /**
          * Where to append element
         */
        "appendTo": 'body' | 'current';
        /**
          * Should dropdown autoclose on changeValue
         */
        "autoClose": boolean;
        "autoFocus": boolean;
        "autocomplete": boolean;
        /**
          * Filter value
         */
        "currentFilter": any;
        /**
          * Define object mapping for id/value
         */
        "dataId": string;
        /**
          * Define object mapping for labels
         */
        "dataLabel": string;
        /**
          * Change value
         */
        "doChange": (val: any, originalEvent?: MouseEvent) => Promise<void>;
        /**
          * Close dropdown
         */
        "doClose": (isDisconnected?: boolean) => Promise<void>;
        /**
          * Open dropdown
         */
        "doOpen": () => Promise<void>;
        /**
          * Filter criteria
         */
        "filter": 'contains' | 'start';
        "hasFilter": boolean;
        "maxHeight": number;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Define object mapping for id/value
         */
        "source": any[];
        /**
          * Selected value
         */
        "value": any;
    }
    interface BmDropdownListItem {
        /**
          * Define object mapping for labels
         */
        "dataLabel": string;
        "isFocused": boolean;
        "refresh": (source: any[]) => Promise<void>;
        /**
          * Define object mapping for id/value
         */
        "sourceItems": any[];
    }
    interface BmModal {
    }
}
export interface BmDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBmDropdownElement;
}
export interface BmDropdownListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBmDropdownListItemElement;
}
declare global {
    interface HTMLBmButtonElement extends Components.BmButton, HTMLStencilElement {
    }
    var HTMLBmButtonElement: {
        prototype: HTMLBmButtonElement;
        new (): HTMLBmButtonElement;
    };
    interface HTMLBmDropdownElement extends Components.BmDropdown, HTMLStencilElement {
    }
    var HTMLBmDropdownElement: {
        prototype: HTMLBmDropdownElement;
        new (): HTMLBmDropdownElement;
    };
    interface HTMLBmDropdownListItemElement extends Components.BmDropdownListItem, HTMLStencilElement {
    }
    var HTMLBmDropdownListItemElement: {
        prototype: HTMLBmDropdownListItemElement;
        new (): HTMLBmDropdownListItemElement;
    };
    interface HTMLBmModalElement extends Components.BmModal, HTMLStencilElement {
    }
    var HTMLBmModalElement: {
        prototype: HTMLBmModalElement;
        new (): HTMLBmModalElement;
    };
    interface HTMLElementTagNameMap {
        "bm-button": HTMLBmButtonElement;
        "bm-dropdown": HTMLBmDropdownElement;
        "bm-dropdown-list-item": HTMLBmDropdownListItemElement;
        "bm-modal": HTMLBmModalElement;
    }
}
declare namespace LocalJSX {
    interface BmButton {
    }
    interface BmDropdown {
        /**
          * Where to append element
         */
        "appendTo"?: 'body' | 'current';
        /**
          * Should dropdown autoclose on changeValue
         */
        "autoClose"?: boolean;
        "autoFocus"?: boolean;
        "autocomplete"?: boolean;
        /**
          * Filter value
         */
        "currentFilter"?: any;
        /**
          * Define object mapping for id/value
         */
        "dataId"?: string;
        /**
          * Define object mapping for labels
         */
        "dataLabel"?: string;
        /**
          * Filter criteria
         */
        "filter"?: 'contains' | 'start';
        "hasFilter"?: boolean;
        "maxHeight"?: number;
        /**
          * When value changed
         */
        "onChanged"?: (event: BmDropdownCustomEvent<{ val: any; originalEvent?: MouseEvent }>) => void;
        /**
          * Before element close, can be prevented
         */
        "onClose"?: (event: BmDropdownCustomEvent<any>) => void;
        /**
          * Before element open, can be prevented
         */
        "onOpen"?: (event: BmDropdownCustomEvent<any>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Define object mapping for id/value
         */
        "source"?: any[];
        /**
          * Selected value
         */
        "value"?: any;
    }
    interface BmDropdownListItem {
        /**
          * Define object mapping for labels
         */
        "dataLabel"?: string;
        "isFocused"?: boolean;
        "onChanged"?: (event: BmDropdownListItemCustomEvent<{ item: any; e: any }>) => void;
        /**
          * Define object mapping for id/value
         */
        "sourceItems"?: any[];
    }
    interface BmModal {
    }
    interface IntrinsicElements {
        "bm-button": BmButton;
        "bm-dropdown": BmDropdown;
        "bm-dropdown-list-item": BmDropdownListItem;
        "bm-modal": BmModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bm-button": LocalJSX.BmButton & JSXBase.HTMLAttributes<HTMLBmButtonElement>;
            "bm-dropdown": LocalJSX.BmDropdown & JSXBase.HTMLAttributes<HTMLBmDropdownElement>;
            "bm-dropdown-list-item": LocalJSX.BmDropdownListItem & JSXBase.HTMLAttributes<HTMLBmDropdownListItemElement>;
            "bm-modal": LocalJSX.BmModal & JSXBase.HTMLAttributes<HTMLBmModalElement>;
        }
    }
}
